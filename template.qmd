---
title: "Lumo: a clean Quarto template"
subtitle: "
Quarto is a stunning tool. It transforms your R or Python code in a very clean report that includes code, charts, explanation and everything else you would like to include.
<br/>
<code>Lumo</code> is a <b>quarto template</b>. It slightly modifies the default appearance of a Quarto document, to make it even more shiny, and fit your brand.
<br/>
This document demoes how a document made with <code>lumo</code> looks like, list its main features and explain how to use it in 3 minutes."
format:
  lumo-html: 
    logo: "logo.png"
    github-repo: "https://www.github.com"
    primary-color: "red"
author: Holtz Yan
date: last-modified
---

## Introduction

Quarto is probably my favorite tool in the R/Python universe. Transforming your code and thoughts into a stunning report in one click always blows my mind.

Even if the default appearance looks good, there are a few tweaks I always like to apply to push the report to the next level.

::: {.column-margin}

Btw, you can learn how to master Quarto thanks to my online course: [Productive R Workflow](https://www.productive-r-workflow.com)

:::


This document aims at showcasing how a quarto document made with the `lumo` format looks like.

```{r, warning=F, message=F}
library(tidyverse) 
library(hrbrthemes) # <1>
library(viridis) # <2>
library(ggiraph)
library(patchwork) 
library(sf)
```

1. this package provides my favorite `ggplot2` theme: `theme_ipsum()`
2. because I was too lazy to find something better in the [R Color Finder](https://r-graph-gallery.com/color-palette-finder)!

:::{.callout}
By the way, you should open the code chunk that is folded above. ⬆️
There is a little stunning surprise on its right hand side.
:::


## Everybody loves map ❤️
Don't forget that you can add full width content, which can be very useful for instance for a nice interactive map made with leaflet.

```{r}
#| column: screen
#| out-width: 100%

# Load the library.
library(leaflet)

# Make a map
leaflet() %>%
  addTiles() %>% # Add default OpenStreetMap map tiles
  addMarkers(lng = 174.768, lat = -36.852, popup = "The birthplace of R")
```


## Connecting graphs

All right, many people know how to create interactive graphs with plotly. But did you know that you can connect graphs together thanks to ggiraph? And using a syntax pretty close from ggplot2?

Pretty close from dark magic isn't.

```{r, fig.cap="Figure: three graphs connected thanks to `ggiraph`"}

# Read the full world map
world_sf <- read_sf("https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/world.geojson")
world_sf <- world_sf %>%
  filter(!name %in% c("Antarctica", "Greenland"))

# Create a sample dataset
happiness_data <- data.frame(
  Country = c(
    "France", "Germany", "United Kingdom",
    "Japan", "China", "Vietnam",
    "United States of America", "Canada", "Mexico"
  ),
  Continent = c(
    "Europe", "Europe", "Europe",
    "Asia", "Asia", "Asia",
    "North America", "North America", "North America"
  ),
  Happiness_Score = rnorm(mean = 30, sd = 20, n = 9),
  GDP_per_capita = rnorm(mean = 30, sd = 20, n = 9),
  Social_support = rnorm(mean = 30, sd = 20, n = 9),
  Healthy_life_expectancy = rnorm(mean = 30, sd = 20, n = 9)
)

# Join the happiness data with the full world map
world_sf <- world_sf %>%
  left_join(happiness_data, by = c("name" = "Country"))


# Create the first chart (Scatter plot)
p1 <- ggplot(world_sf, aes(
  GDP_per_capita,
  Happiness_Score,
  tooltip = name,
  data_id = Continent,
  color = Continent
)) +
  geom_point_interactive(data = filter(world_sf, !is.na(Happiness_Score)), size = 4) +
  theme_minimal() +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    legend.position = "none"
  )

# Create the second chart (Bar plot)
p2 <- ggplot(world_sf, aes(
  x = reorder(name, Happiness_Score),
  y = Happiness_Score,
  tooltip = name,
  data_id = Continent,
  fill = Continent
)) +
  geom_col_interactive(data = filter(world_sf, !is.na(Happiness_Score))) +
  coord_flip() +
  theme_minimal() +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    legend.position = "none"
  )

# Create the third chart (choropleth)
p3 <- ggplot() +
  geom_sf(data = world_sf, fill = "lightgrey", color = "lightgrey") +
  geom_sf_interactive(
    data = filter(world_sf, !is.na(Happiness_Score)),
    aes(fill = Continent, tooltip = name, data_id = Continent)
  ) +
  coord_sf(crs = st_crs(3857)) +
  theme_void() +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    legend.position = "none"
  )

# Combine the plots
combined_plot <- (p1 + p2) / p3 + plot_layout(heights = c(1, 2))

# Create the interactive plot
interactive_plot <- girafe(ggobj = combined_plot)
interactive_plot <- girafe_options(
  interactive_plot,
  opts_hover(css = "fill:red;stroke:black;")
)

interactive_plot
```


## Interactive table

It is very easy to insert an interactive table in your document thanks to the `DT` package. The output allows to filter rows, search for something and sort using a specific columns!

Install the library with `install.packages("DT")`. Then, just pass a dataframe to the `datatable()` function to get a stunning interactive output!

```{r}
library(DT)
data(iris)

# Make a table
datatable(iris, filter = "top")
```



## More Information

You can learn more about controlling the appearance of HTML output here: <https://quarto.org/docs/output-formats/html-basics.html>






## This template is nothing withotu quarto tricks

If you have several plots to make, each targeting something special in your dataset, you should consider using pills for that!

::: {.panel-tabset .nav-pills}

## Scatterplot

Always a good scatterplot

```{r, fig.align='center'}
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + 
    geom_point() +
    theme_ipsum()
```

## Boxplot

You can also make a [boxplot](https://r-graph-gallery.com/89-box-and-scatter-plot-with-ggplot2.html), but please do not hide the underlying distribution! This is widely explain in my data-to-viz.com project in case you're not convinced 😋.

```{r, fig.align='center'}
# create a dataset
data <- data.frame(
  name=c( rep("A",500), rep("B",500), rep("B",500), rep("C",20), rep('D', 100)  ),
  value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )
)

# Plot
data %>%
  ggplot( aes(x=name, y=value, fill=name)) +
    geom_boxplot() +
    scale_fill_viridis(discrete = TRUE, alpha=0.6) +
    geom_jitter(color="black", size=0.4, alpha=0.9) +
    theme_ipsum() +
    theme(
      legend.position="none",
      plot.title = element_text(size=11)
    ) +
    ggtitle("A boxplot with jitter") +
    xlab("")
```

## Barplot
Content that will show under first tab

```{r, fig.align='center'}
data %>%
  ggplot( aes(x=name, y=value, fill=name)) +
    geom_boxplot() +
    scale_fill_viridis(discrete = TRUE, alpha=0.6) +
    geom_jitter(color="black", size=0.4, alpha=0.9) +
    theme_ipsum() +
    theme(
      legend.position="none",
      plot.title = element_text(size=11)
    ) +
    ggtitle("A boxplot with jitter") +
    xlab("")
```


:::








## Session Info

When you make a Quarto doc, it is a good practice to include information about your working environment. This is straightforward, you just have to call the `sessionInfo()` info and all your R and package versions will be printed. This is a huge boost for reproducibility.

<button type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" >Session Information</button><div id="collapseOne" class="accordion-collapse collapse"><div>


```{r}
sessionInfo()
```

</div></div>


